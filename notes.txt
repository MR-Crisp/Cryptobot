CLASS MyGUI(QMainWindow):

    # Initialize the GUI
    FUNCTION __init__(self):
        # Load the GUI from an XML file
        uic.loadUi("/Users/aamir/programming/crypto/gui.ui", self)
        # Show the GUI

        # Configure date inputs
        self.StartDate_tab1 = self.findChild(QDateEdit, "StartDate")
        self.EndDate_tab1 = self.findChild(QDateEdit, "EndDate")
        self.startdate_tab1 = self.Dateformat(self.StartDate_tab1.date())
        self.enddate_tab1 = self.Dateformat(self.EndDate_tab1.date())
        self.StartDate_tab1.dateChanged.connect(self.DateChanged)
        self.EndDate_tab1.dateChanged.connect(self.DateChanged)

        # Initialize and configure a stock selection dropdown menu
        self.Stock_select_tab1 = self.findChild(QComboBox, "StockcomboBox")

        # Configure a capital slider
        self.CapitalSlider_tab1 = self.findChild(QSlider, "horizontalSlider")
        self.CapitalLabel_tab1 = self.findChild(QLabel, "CapitalLabel")

    # Calculate capital slider value
    FUNCTION calcCapitalSlider(self):
        value_tab1 = self.CapitalSlider_tab1.value()
        self.CapitalLabel_tab1.setText(STRING(value_tab1))
    END FUNCTION

    # Format a date
    FUNCTION Dateformat(self, unformatted):
        day = STRING(unformatted.day())
        month = STRING(unformatted.month())
        year = STRING(unformatted.year())
        formatted = year + "-" + month + "-" + day
        RETURN formatted
    END FUNCTION

    # Handle the button click
    FUNCTION MainButtonClick(self):
        bot = averageCrossover(
            self.Stock_select_tab1.currentText(),
            self.startdate_tab1,
            self.enddate_tab1,
            4,
            20
        )
        bot.calc_MA()
        bot.algo(FLOAT(self.CapitalSlider_tab1.value()))
        self.OutputLabel_tab1 = self.findChild(QLabel, "OutputLabel")
        self.OutputLabel_tab1.setText(STRING(bot.profit))
    END FUNCTION

    # Update date variables when dates change
    FUNCTION DateChanged(self):
        self.startdate_tab1 = self.Dateformat(self.StartDate_tab1.date())
        self.enddate_tab1 = self.Dateformat(self.EndDate_tab1.date())
    END FUNCTION
END CLASS

# Define the main function
FUNCTION main():
    app = QApplication([])
    window = MyGUI()
    app.exec_()
END FUNCTION

# Check if the script is executed as the main program
IF __name__ == "__main__":
    main()
END IF
